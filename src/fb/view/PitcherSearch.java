/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package src.fb.view;

import java.awt.Image;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dianeyanke
 */
public class PitcherSearch extends javax.swing.JPanel {
    //some constants
    private final String path =
      "/Users/dianeyanke/NetBeansProjects/FantasyBaseball/build/classes/src/fb/resources/";
    private final String file = "baseballpic.jpg";
    private static final int CAREER_ONLY_SEARCH = 0;
    private String[] comparisonOperators = { " < ", " <= ", " = ", " >= ", " > ", "none" };
    //some instance fields
    private MainBaseballFrame base;
    private TeamDisplay caller;
    private int teamID;
   
    
    /**
     * Creates new form PitcherSearch
     */
    public PitcherSearch(MainBaseballFrame base, TeamDisplay caller, int teamID) {
        initComponents();
        this.base = base;
        this.caller = caller;
        this.teamID = teamID;
        
        //Prepare every Combo Box except for the one for seasons
        populateComboBoxes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        cbWins = new javax.swing.JComboBox<>();
        cbLosses = new javax.swing.JComboBox<>();
        cbSaves = new javax.swing.JComboBox<>();
        cbWalks = new javax.swing.JComboBox<>();
        cbStrikeouts = new javax.swing.JComboBox<>();
        cbERA = new javax.swing.JComboBox<>();
        cbErrors = new javax.swing.JComboBox<>();
        tfWins = new javax.swing.JTextField();
        tfLosses = new javax.swing.JTextField();
        tfSaves = new javax.swing.JTextField();
        tfWalks = new javax.swing.JTextField();
        tfStrikeouts = new javax.swing.JTextField();
        tfERA = new javax.swing.JTextField();
        tfErrors = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        cbGames = new javax.swing.JComboBox<>();
        tfGames = new javax.swing.JTextField();

        jLabel1.setFont(new java.awt.Font("Optima", 0, 24)); // NOI18N
        jLabel1.setText("Pitcher Search");

        jLabel2.setIcon(new ImageIcon((Toolkit.getDefaultToolkit().getImage(path+file)).getScaledInstance(77, 63, Image.SCALE_DEFAULT)));
        jLabel2.setPreferredSize(new java.awt.Dimension(77, 63));

        jLabel3.setText("Wins");

        jLabel4.setText("Losses");

        jLabel5.setText("Saves");

        jLabel6.setText("Walks");

        jLabel7.setText("Strikeouts");

        jLabel8.setText("E.R.A.");

        jLabel9.setText("Errors");

        btnSearch.setText("Search.");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel.");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        cbWins.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbLosses.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbSaves.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbWalks.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbStrikeouts.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbERA.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbErrors.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        tfWins.setText("N/A");

        tfLosses.setText("N/A");

        tfSaves.setText("N/A");

        tfWalks.setText("N/A");

        tfStrikeouts.setText("N/A");

        tfERA.setText("N/A");

        tfErrors.setText("N/A");

        jLabel11.setText("Games");

        cbGames.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        tfGames.setText("N/A");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbGames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfGames, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbStrikeouts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfStrikeouts, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbWalks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfWalks))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(14, 14, 14)
                        .addComponent(cbSaves, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfSaves))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbLosses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfLosses))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addGap(19, 19, 19)
                            .addComponent(cbWins, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(tfWins, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(cbERA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(cbErrors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfErrors)
                            .addComponent(tfERA))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSearch, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnCancel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(cbWins, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfWins, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(cbLosses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfLosses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(cbSaves, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfSaves, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(cbWalks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfWalks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(cbStrikeouts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfStrikeouts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(cbERA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfERA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(btnSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(cbErrors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfErrors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(cbGames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfGames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // Implement the search query
        // Does the user want to only view career statistics?
        Object[] options = {"Yes", "No"};
        //Yes = 0, No = 1
        int optionChosen = JOptionPane.showOptionDialog(base, 
                       "Career statistics only (click no to show individual season statistics) ?",
                       "Career statistics?",
                       JOptionPane.YES_NO_OPTION,
                       JOptionPane.QUESTION_MESSAGE,
                       null,
                       options,
                       options[1]);
        //Obtain the comparison operators selected by the user
        String[] comparisons = new String[8];
        comparisons[0] = (String) cbWins.getSelectedItem(); //wins
        comparisons[1] = (String) cbLosses.getSelectedItem(); //losses
        comparisons[2] = (String) cbSaves.getSelectedItem(); //saves
        comparisons[3] = (String) cbWalks.getSelectedItem(); //walks
        comparisons[4] = (String) cbStrikeouts.getSelectedItem(); //strikeouts
        comparisons[5] = (String) cbERA.getSelectedItem(); //e.r.a.
        comparisons[6] = (String) cbErrors.getSelectedItem(); //errors
        comparisons[7] = (String) cbGames.getSelectedItem(); //games
        //Obtain the parameters of the query from the text fields
        Object[] parameters = new Object[8];
        parameters[0] = (Object) tfWins.getText(); //wins
        parameters[1] = (Object) tfLosses.getText(); //losses
        parameters[2] = (Object) tfSaves.getText(); //saves
        parameters[3] = (Object) tfWalks.getText(); //walks
        parameters[4] = (Object) tfStrikeouts.getText(); //strikeouts
        parameters[5] = (Object) tfERA.getText(); //e.r.a.
        parameters[6] = (Object) tfErrors.getText(); //errors
        parameters[7] = (Object) tfGames.getText(); //games
        
        validateInputOrSetDefault(parameters, comparisons);
        
        DefaultTableModel dtm = runQueryAndPopulateDTM(comparisons, parameters, optionChosen);
    }//GEN-LAST:event_btnSearchActionPerformed

    /*
    * Method to run a query based on user's search criteria.
    *
    * @arg comps : an array of comparison operators in String format
    * @arg params : an array of seven Integer values and one Double value giving query comparison values
    * @arg careerOnly: a flag (yes = 0, no = 1) determining whether we average the statistics 
    *
    * @ret DefaultTableModel: a table model that's populated using the ResultSet returned by the query
    */
    private DefaultTableModel runQueryAndPopulateDTM(String[] comps, Object[] params, int careerOnly) {
        
        DefaultTableModel tableModelReturned = null;
        
           //Make sure you can get the Connection first
        Connection conn = ConnectionSupplier.getMyConnection();
        Statement stmt = null;
        ResultSet rs = null;
        
        try {
            String query = null;

            //If the statistics should be averaged across a career, follow this path.
            if (careerOnly == CAREER_ONLY_SEARCH) {

            } //otherwise, output statistics for each player for each year they played (project the 'year' attribute)
            else {
                query = "SELECT DISTINCT select distinct p.playerID, p.nameFirst, p.nameLast, p.debut, p.finalGame "
                        + "from player p, "
                        + "(select pi.yearID, pi.playerid, sum(pi.wins) as Wins, sum(pi.losses) as losses, "
                        + "sum(pi.games) as Games, sum(pi.saves) as Saves, sum(pi.walks) as Walks, "
                        + "sum(pi.strikeouts) as Strikeouts, avg(pi.era) as ERA "
                        + "from pitching pi "
                        + "group by pi.yearID, pi.playerID) as pit "
                        + "where p.playerID = pit.playerID and "
                        + "pit.wins " + comps[0] + params[0] + " AND "
                        + "pit.losses" + comps[1] + params[1] + " AND "
                        + "pit.games" + comps[2] + params[2] + " AND "
                        + "pit.saves" + comps[3] + params[3] + " AND "
                        + "pit.walks" + comps[4] + params[4] + " AND "
                        + "pit.strikeouts" + comps[5] + params[5] + " AND "
                        + "pit.era" + comps[6] + params[6] + " "
                        + "p.playerID in (select distinct p2.playerID "
                        + "from player p2, (select f.playerID, f.yearID, sum(f.errors) as Err "
                        + "from fielding f "
                        + "group by f.yearid,f.playerID) as fi " 
                        + " where p2.playerID =  fi.playerID and "
                        + "fi.err " + comps[7] + params[7] + "); ";
     
            }
            stmt = conn.createStatement();
            rs = stmt.executeQuery(query);
            tableModelReturned = populateTableModel(rs);

        } catch (SQLException e) {
            BaseballUtilities.printSQLException(e);
        } finally {
            try {
                conn.close();
                if (stmt != null) {
                    stmt.close();
                }
                if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                //TODO add clean up
                BaseballUtilities.printSQLException(e);
            }
        }
        
    
        
        return tableModelReturned;
    }
    
    private DefaultTableModel populateTableModel(ResultSet rs) {
        
        try {
            ResultSetMetaData meta = rs.getMetaData();
            
            //Table Header
            Vector<String> cols = new Vector<String>();
            int numCols = meta.getColumnCount();
            //numbering starts from 1!
            for (int currCol = 1; currCol <= numCols; currCol++) {
                cols.add(meta.getColumnName(currCol));
            }
            
            //Table Body
            Vector<Vector<Object>> data = new Vector<Vector<Object>>();
            while (rs.next()) {
                Vector<Object> holder = new Vector<Object>();
                for (int currCol = 1; currCol <= numCols; currCol++) {
                    holder.add(rs.getObject(currCol));
                }
                data.add(holder);
            }
            
            return new DefaultTableModel(data, cols);
           // teamsTable.fireTableDataChanged();
            
        } catch (SQLException e) {
            //TODO: add clean up
            BaseballUtilities.printSQLException(e);
        }
        return null;
    }
    
    
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // Return to Team List
        base.switchPanel(base, caller);  
    }//GEN-LAST:event_btnCancelActionPerformed

    private void validateInputOrSetDefault(Object[] p, String[] c) {
        for (int i = 0; i < 8; i++) {
            if (i == 5) {  //special case: ERA
                if (c[5] == "none") { 
                  p[5] = (Double) 0.0; 
                  c[5] = " >= "; 
                } else {
                    try {
                        p[5] = Double.parseDouble((String)p[5]);
                    //set a default comparison if they screw up the text entry
                    } catch (NumberFormatException e) {
                        p[5] = (Double) 0.0; 
                        c[5] = " >= ";
                    }
                }
            }
            else {
                if (c[i] == "none") { 
                  p[i] = (Integer) 0; 
                  c[i] = " >= "; 
                } else {
                    try {
                        p[i] = Integer.parseInt((String)p[i]);
                    //set a default comparison if they screw up the text entry
                    } catch (NumberFormatException e) {
                        p[i] = (Integer) 0; 
                        c[i] = " >= ";
                    }
                }
            }
        }
    }
    
    private void populateComboBoxes() {
        
        DefaultComboBoxModel dcbm1 = new DefaultComboBoxModel(comparisonOperators);
        DefaultComboBoxModel dcbm2 = new DefaultComboBoxModel(comparisonOperators);
        DefaultComboBoxModel dcbm3 = new DefaultComboBoxModel(comparisonOperators);
        DefaultComboBoxModel dcbm4 = new DefaultComboBoxModel(comparisonOperators);
        DefaultComboBoxModel dcbm5 = new DefaultComboBoxModel(comparisonOperators);
        DefaultComboBoxModel dcbm6 = new DefaultComboBoxModel(comparisonOperators);
        DefaultComboBoxModel dcbm7 = new DefaultComboBoxModel(comparisonOperators);
        DefaultComboBoxModel dcbm8 = new DefaultComboBoxModel(comparisonOperators);
        
        cbERA.setModel(dcbm1);
        cbErrors.setModel(dcbm2);
        cbLosses.setModel(dcbm3);
        cbSaves.setModel(dcbm4);
        cbStrikeouts.setModel(dcbm5);
        cbWalks.setModel(dcbm6);
        cbWins.setModel(dcbm7);
        cbGames.setModel(dcbm8);
        //set to "=" be default
        cbERA.setSelectedIndex(2);
        cbErrors.setSelectedIndex(2);
        cbLosses.setSelectedIndex(2);
        cbSaves.setSelectedIndex(2);
        cbStrikeouts.setSelectedIndex(2);
        cbWalks.setSelectedIndex(2);
        cbWins.setSelectedIndex(2);
        cbGames.setSelectedIndex(2);
    }
    
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cbERA;
    private javax.swing.JComboBox<String> cbErrors;
    private javax.swing.JComboBox<String> cbGames;
    private javax.swing.JComboBox<String> cbLosses;
    private javax.swing.JComboBox<String> cbSaves;
    private javax.swing.JComboBox<String> cbStrikeouts;
    private javax.swing.JComboBox<String> cbWalks;
    private javax.swing.JComboBox<String> cbWins;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField tfERA;
    private javax.swing.JTextField tfErrors;
    private javax.swing.JTextField tfGames;
    private javax.swing.JTextField tfLosses;
    private javax.swing.JTextField tfSaves;
    private javax.swing.JTextField tfStrikeouts;
    private javax.swing.JTextField tfWalks;
    private javax.swing.JTextField tfWins;
    // End of variables declaration//GEN-END:variables
}
